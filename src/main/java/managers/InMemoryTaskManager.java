        package managers;

import tasks.EpicTask;
import tasks.Status;
import tasks.SubTask;
import tasks.Task;

import java.util.ArrayList;
import java.util.HashMap;

public class InMemoryTaskManager implements TaskManager {
    private long countID; // does ++countID when new Task()
    // –í–æ –≤—Å–µ—Ö –º–∞–ø–∞—Ö Long == ID –∑–∞–¥–∞—á–∏
    private final HashMap<Long, Task> simpleTasks;
    private final HashMap<Long, EpicTask> epicTasks;
    private final HashMap<Long, SubTask> subTasks;

    public HistoryManager getInMemoryHistoryManager() {
        return inMemoryHistoryManager;
    }

    private HistoryManager inMemoryHistoryManager = Managers.getDefaultHistory();

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    public InMemoryTaskManager() {
        countID = 0;
        simpleTasks = new HashMap<>();
        epicTasks = new HashMap<>();
        subTasks = new HashMap<>();
    }

    public long generateID() {
        return ++countID;
    }

    public HashMap<Long, Task> getSimpleTasks() {
        return simpleTasks;
    }

    public HashMap<Long, EpicTask> getEpicTasks() {
        return epicTasks;
    }

    public HashMap<Long, SubTask> getSubTasks() {
        return subTasks;
    }

    @Override
    public void deleteAllSimpleTasks() {
        if(!simpleTasks.isEmpty()) {
            simpleTasks.clear();
        }
    }

    // –î–æ–±–∞–≤–∏–ª–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–∞–±—Ç–∞—Å–æ–∫. –£–¥–∞–ª–∏–ª–∞ –≤—Å–µ - –≤–µ–¥—å –±–µ–∑ –≤—Å–µ—Ö —ç–ø–∏–∫–æ–≤ —Å–∞–±—Ç–∞—Å–æ–∫ –Ω–µ –±—É–¥–µ—Ç —Ç–æ–∂–µ –≤—Å–µ—Ö
    @Override
    public void deleteAllEpicTasks() {
        if(!epicTasks.isEmpty()) {
            subTasks.clear();
            epicTasks.clear();
        }
    }


    @Override public void deleteAllSubTasks() {
        if(!subTasks.isEmpty()) {
            subTasks.clear();
            for (EpicTask epic : epicTasks.values()) {
                epic.setStatus(Status.NEW); // –ë–µ–∑ —Å–∞–±—Ç–∞—Å–æ–∫ —ç–ø–∏–∫–∏ —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç—ã–µ, –∏ —Å—Ç–∞—Ç—É—Å —É –Ω–∏—Ö –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "–Ω–æ–≤—ã–π"
            }
        }
    }

    @Override
    public void deleteSimpleTask(long ID) {
        simpleTasks.remove(ID);
    } // deleteSimpleTask

    @Override
    public void deleteEpicTask(long ID) {
        // —É–±—Ä–∞–ª–∞ –∞–ª–≥–æ—Ä–∏—Ç–º –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ üôÇ
        for (SubTask subTask : subTasks.values()) {
            if (subTask.getEpicID() == ID) {
                subTasks.remove(subTask.getID());
            }
        }    epicTasks.remove(ID);
        epicTasks.remove(ID);
    } // deleteEpicTask

    @Override
    public void deleteSubTask(long ID) {
        long epicID = subTasks.get(ID).getEpicID();
        subTasks.remove(ID);
        updateEpicStatus(epicID);
    }

    @Override
    public Task getSimpleTaskByIDorNull(long ID) { // –≤—ã–∑—ã–≤–∞—Ç—å —á–µ—Ä–µ–∑ if (!=null) !!!
        if (!simpleTasks.containsKey(ID)) {
            System.out.println("ID not found");
            return null;
        } else {
            inMemoryHistoryManager.add(simpleTasks.get(ID));
            return simpleTasks.get(ID);
        }
    } // getSimpleTaskByIDorNull

    @Override
    public EpicTask getEpicTaskByIDorNull(long ID) { // –≤—ã–∑—ã–≤–∞—Ç—å —á–µ—Ä–µ–∑ if (!=null) !!!
        if(!epicTasks.containsKey(ID)) {
            System.out.println("ID not found");
            return null;
        } else {
            inMemoryHistoryManager.add(epicTasks.get(ID));
            return epicTasks.get(ID);
        }
    } // getEpicTaskByIDorNull

    @Override
    public SubTask getSubTaskByIDorNull(long ID) { // –≤—ã–∑—ã–≤–∞—Ç—å —á–µ—Ä–µ–∑ if (!=null) !!!
        if (!subTasks.containsKey(ID)) {
            System.out.println("ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
            return null;
        } else {
            inMemoryHistoryManager.add(subTasks.get(ID));
            return subTasks.get(ID);
        }
    } // getSubTaskByIDorNull

    @Override
    public ArrayList<SubTask> getAllSubTasksOfEpicOrNull (long epicID) {  // –≤—ã–∑—ã–≤–∞—Ç—å —á–µ—Ä–µ–∑ if (!=null) !!!
        ArrayList<SubTask> subsOfThisEpic = new ArrayList<>();
        for (SubTask subTask : subTasks.values()) {
            for (Long epicSubsID : epicTasks.get(epicID).subTasksIDs) {
                if (epicSubsID == subTask.getID()) {
                    subsOfThisEpic.add(subTask);
                }
            }
        }
        return subsOfThisEpic;
    }

    @Override
    public long recordSimpleTask (Task task) {
        for (Task taskIterated : simpleTasks.values()) {
            if (taskIterated.equals(task)) {
                System.out.println("–¢–∞–∫–∞—è –∑–∞–¥–∞—á–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
                break;
            }
        }
        task.setID(generateID());
        task.setStatus(Status.NEW);
        simpleTasks.put(task.getID(), task);
        return task.getID();
    } // recordSimpleTask

    @Override
    public long recordEpicTask (EpicTask epicTask) {
        for (EpicTask taskIterated : epicTasks.values()) {
            if (taskIterated.equals(epicTask)) {
                System.out.println("–¢–∞–∫–∞—è –∑–∞–¥–∞—á–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
                break;
            }
        }
        epicTask.setID(generateID());
        epicTask.setStatus(Status.NEW);
        epicTasks.put(epicTask.getID(), epicTask);
        return epicTask.getID();
    } // recordEpicTask

    @Override
    public long recordSubTask (SubTask subTask) {
        subTask.setID(generateID());
        subTask.setStatus(Status.NEW);
        for (SubTask taskIterated : subTasks.values()) {
            if (taskIterated.equals(subTask)) {
                System.out.println("–¢–∞–∫–∞—è –∑–∞–¥–∞—á–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
                break;
            }
            if (!epicTasks.containsKey(subTask.getEpicID())) { // –ù–µ –∑–Ω–∞—é, –≤–æ–∑–º–æ–∂–Ω–∞ –ª–∏ –ø–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è —ç–ø–∏–∫–∞
                System.out.println("–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É —Ç–∏–ø–∞ epic");
                break;
            }
        }
        // –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∑–∞–¥–∞—á —ç–ø–∏–∫–∞
        subTasks.put(subTask.getID(), subTask);
        epicTasks.get(subTask.getEpicID()).subTasksIDs.add(subTask.getID()); // –£–∂–µ –±—ã–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏

        // –ï—Å–ª–∏ –ø–æ–¥–∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ª–∏ –æ–Ω–∞ –≤ —ç–ø–∏–∫–µ, –∏ –µ—Å–ª–∏ –¥–∞, —Ç–æ –∏ –≤–µ—Å—å —ç–ø–∏–∫ –ø–æ–º–µ—Ç–∏—Ç—å DONE
        if (subTask.getStatus().equals(Status.DONE)) {
            long epicID = subTask.getEpicID();
            EpicTask parentEpic = epicTasks.get(epicID);
            int finishedTasks = 0;
            for (Long taskID : parentEpic.subTasksIDs) {
                if (subTasks.get(taskID).getStatus().equals(Status.DONE)) { finishedTasks++;}
            }
            if (finishedTasks != 0 && finishedTasks == parentEpic.subTasksIDs.size()) {
                epicTasks.get(epicID).setStatus(Status.DONE);
            } else {
                epicTasks.get(epicID).setStatus(Status.IN_PROGRESS);
            }
        }

        return subTask.getID();
    } // recordSubTask

    // update –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π (–ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π) –æ–±—ä–µ–∫—Ç –Ω–∞ –º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–≥–æ, –ø–æ ID
    @Override
    public void updateSimpleTask(Task task, long ID, Status status) {
        task.setStatus(status);
        task.setID(ID);
        simpleTasks.put(ID, task);
    } // updateSimpleTask

    @Override
    public void updateEpicTask(EpicTask epicTask, long ID) {
        epicTask.setID(ID);
        epicTask.setStatus(epicTasks.get(ID).getStatus());
        epicTasks.replace(ID, epicTask);
    } // updateEpicTask

    @Override
    public void updateSubTask(SubTask subTask, long ID, Status status) {
        subTask.setStatus(status);
        subTask.setID(ID);
        subTasks.replace(ID, subTask);
        updateEpicStatus(subTask.getEpicID());
    } // updateSubTask

    // –ú–Ω–µ –ø–æ–∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±—ä—ë–º–Ω–∞—è, –∏ –ø—É—Å—Ç—å –æ–Ω–∞ –±—É–¥–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º –º–µ—Ç–æ–¥–æ–º
    private void updateEpicStatus(long epicID) {
        EpicTask epicTask = epicTasks.get(epicID);
        int doneTasks = 0;
        int newTasks = 0;
        int progressTasks = 0; // never accessed 'cause it's in "else"
        ArrayList<SubTask> subsOfThisEpic = getAllSubTasksOfEpicOrNull(epicID);

        for (SubTask subTask : subsOfThisEpic) {
            switch (subTask.getStatus()) {
                case DONE:
                    doneTasks++;
                case NEW:
                    newTasks++;
                case IN_PROGRESS:

                    progressTasks++;
            }
        } // –Ω–∞ –≤—ã—Ö–æ–¥–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ—Å—á–∏—Ç–∞–Ω–æ, —Å–∫–æ–ª—å–∫–æ —Å–∞–±—Ç–∞—Å–æ–∫ —Å –∫–∞–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –≤ —ç–ø–∏–∫–µ

        if (doneTasks == subsOfThisEpic.size()) {
            epicTask.setStatus(Status.DONE);
        } else if (newTasks == subsOfThisEpic.size() || subsOfThisEpic.size() == 0) {
            epicTask.setStatus(Status.NEW);
        } else {
            epicTask.setStatus(Status.IN_PROGRESS);
        }
    } // updateEpicStatus

} // TaskManager